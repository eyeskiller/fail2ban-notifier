#!/bin/bash
# Connector Creation Tool for fail2ban-notify
# Usage: ./create-connector.sh <name> <type>

set -euo pipefail

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

CONNECTOR_DIR="/etc/fail2ban/connectors"

usage() {
    echo "Usage: $0 <name> <type>"
    echo ""
    echo "Types:"
    echo "  bash     - Bash script connector"
    echo "  python   - Python script connector"
    echo "  webhook  - Simple webhook connector"
    echo ""
    echo "Examples:"
    echo "  $0 mattermost bash"
    echo "  $0 custom-api python"
    echo "  $0 webhook webhook"
    exit 1
}

if [[ $# -ne 2 ]]; then
    usage
fi

NAME="$1"
TYPE="$2"

# Validate name
if [[ ! "$NAME" =~ ^[a-zA-Z0-9_-]+$ ]]; then
    echo -e "${RED}‚ùå Invalid name. Use only alphanumeric characters, dashes, and underscores.${NC}"
    exit 1
fi

# Create connector directory if it doesn't exist
mkdir -p "$CONNECTOR_DIR"

case "$TYPE" in
    "bash")
        FILENAME="$CONNECTOR_DIR/$NAME.sh"
        cat > "$FILENAME" << 'EOF'
#!/bin/bash
# Custom Connector: __NAME__
# Generated by fail2ban-notify connector creation tool

set -euo pipefail

# Configuration - Add your environment variables here
WEBHOOK_URL="${__NAME_UPPER___WEBHOOK_URL:-}"
# Add more configuration variables as needed

# Validation
if [[ -z "$WEBHOOK_URL" ]]; then
    echo "Error: __NAME_UPPER___WEBHOOK_URL not set" >&2
    exit 1
fi

# Get notification data from environment variables
IP="${F2B_IP:-unknown}"
JAIL="${F2B_JAIL:-unknown}"
ACTION="${F2B_ACTION:-ban}"
TIME="${F2B_TIME:-$(date -Iseconds)}"
TIMESTAMP="${F2B_TIMESTAMP:-$(date +%s)}"
COUNTRY="${F2B_COUNTRY:-}"
REGION="${F2B_REGION:-}"
CITY="${F2B_CITY:-}"
ISP="${F2B_ISP:-}"
HOSTNAME="${F2B_HOSTNAME:-}"
FAILURES="${F2B_FAILURES:-0}"

# Optional: Read JSON data from stdin
JSON_DATA=""
if [[ -p /dev/stdin ]]; then
    JSON_DATA=$(cat)
fi

# Determine action-specific settings
if [[ "$ACTION" == "unban" ]]; then
    # Unban settings
    COLOR="good"
    EMOJI="‚úÖ"
    STATUS="unbanned"
else
    # Ban settings  
    COLOR="danger"
    EMOJI="üö´"
    STATUS="banned"
fi

# Build location string
LOCATION=""
if [[ -n "$COUNTRY" ]]; then
    LOCATION=" from $COUNTRY"
    if [[ -n "$CITY" ]]; then
        LOCATION=" from $CITY, $COUNTRY"
    fi
fi

# Create your custom payload here
# This is a generic JSON example - modify for your service
PAYLOAD=$(cat <<EOP
{
    "service": "__NAME__",
    "alert": {
        "title": "$EMOJI Fail2Ban ${ACTION^} Alert",
        "message": "IP $IP$LOCATION has been $STATUS in jail '$JAIL'",
        "severity": "$COLOR",
        "timestamp": "$TIME",
        "details": {
            "ip": "$IP",
            "jail": "$JAIL", 
            "action": "$ACTION",
            "failures": $FAILURES,
            "location": {
                "country": "$COUNTRY",
                "city": "$CITY",
                "isp": "$ISP"
            }
        }
    }
}
EOP
)

# Send the notification
# Modify this section for your specific service API
HTTP_CODE=$(curl -s -w "%{http_code}" -o /dev/null \
    -H "Content-Type: application/json" \
    -H "User-Agent: fail2ban-notify/1.0" \
    -d "$PAYLOAD" \
    "$WEBHOOK_URL")

if [[ "$HTTP_CODE" -ge 200 && "$HTTP_CODE" -lt 300 ]]; then
    echo "__NAME__ notification sent successfully (HTTP $HTTP_CODE)"
    exit 0
else
    echo "__NAME__ notification failed (HTTP $HTTP_CODE)" >&2
    exit 1
fi
EOF
        ;;

    "python")
        FILENAME="$CONNECTOR_DIR/$NAME.py"
        cat > "$FILENAME" << 'EOF'
#!/usr/bin/env python3
"""
Custom Connector: __NAME__
Generated by fail2ban-notify connector creation tool
"""

import os
import sys
import json
import requests
from datetime import datetime

def get_config():
    """Get configuration from environment variables"""
    config = {
        'webhook_url': os.getenv('__NAME_UPPER___WEBHOOK_URL', ''),
        'timeout': int(os.getenv('__NAME_UPPER___TIMEOUT', '30')),
        # Add more configuration options here
    }
    
    if not config['webhook_url']:
        print("Error: __NAME_UPPER___WEBHOOK_URL not set", file=sys.stderr)
        sys.exit(1)
    
    return config

def get_notification_data():
    """Get notification data from environment variables and stdin"""
    data = {
        'ip': os.getenv('F2B_IP', 'unknown'),
        'jail': os.getenv('F2B_JAIL', 'unknown'),
        'action': os.getenv('F2B_ACTION', 'ban'),
        'time': os.getenv('F2B_TIME', datetime.now().isoformat()),
        'timestamp': int(os.getenv('F2B_TIMESTAMP', '0')),
        'country': os.getenv('F2B_COUNTRY', ''),
        'region': os.getenv('F2B_REGION', ''),
        'city': os.getenv('F2B_CITY', ''),
        'isp': os.getenv('F2B_ISP', ''),
        'hostname': os.getenv('F2B_HOSTNAME', ''),
        'failures': int(os.getenv('F2B_FAILURES', '0')),
    }
    
    # Try to read additional JSON data from stdin
    try:
        if not sys.stdin.isatty():
            json_data = json.loads(sys.stdin.read())
            data.update(json_data)
    except (json.JSONDecodeError, Exception):
        pass
    
    return data

def create_payload(data):
    """Create the notification payload"""
    emoji = "‚úÖ" if data['action'] == 'unban' else "üö´"
    status = "unbanned" if data['action'] == 'unban' else "banned"
    
    # Build location string
    location = ""
    if data['country']:
        location = f" from {data['country']}"
        if data['city']:
            location = f" from {data['city']}, {data['country']}"
    
    # Create your custom payload structure here
    payload = {
        "service": "__NAME__",
        "alert": {
            "title": f"{emoji} Fail2Ban {data['action'].capitalize()} Alert",
            "message": f"IP {data['ip']}{location} has been {status} in jail '{data['jail']}'",
            "severity": "warning" if data['action'] == 'ban' else "info",
            "timestamp": data['time'],
            "details": {
                "ip": data['ip'],
                "jail": data['jail'],
                "action": data['action'],
                "failures": data['failures'],
                "location": {
                    "country": data['country'],
                    "city": data['city'],
                    "isp": data['isp']
                }
            }
        }
    }
    
    return payload

def send_notification(payload, config):
    """Send the notification"""
    try:
        headers = {
            'Content-Type': 'application/json',
            'User-Agent': 'fail2ban-notify/1.0'
        }
        
        response = requests.post(
            config['webhook_url'],
            json=payload,
            headers=headers,
            timeout=config['timeout']
        )
        
        response.raise_for_status()
        print(f"__NAME__ notification sent successfully (HTTP {response.status_code})")
        return True
        
    except requests.exceptions.RequestException as e:
        print(f"__NAME__ notification failed: {e}", file=sys.stderr)
        return False

def main():
    """Main function"""
    config = get_config()
    data = get_notification_data()
    payload = create_payload(data)
    
    if send_notification(payload, config):
        sys.exit(0)
    else:
        sys.exit(1)

if __name__ == '__main__':
    main()
EOF
        ;;

    "webhook")
        FILENAME="$CONNECTOR_DIR/$NAME.sh"
        cat > "$FILENAME" << 'EOF'
#!/bin/bash
# Simple Webhook Connector: __NAME__
# Generated by fail2ban-notify connector creation tool

set -euo pipefail

# Configuration
WEBHOOK_URL="${__NAME_UPPER___WEBHOOK_URL:-}"
AUTH_HEADER="${__NAME_UPPER___AUTH_HEADER:-}"

if [[ -z "$WEBHOOK_URL" ]]; then
    echo "Error: __NAME_UPPER___WEBHOOK_URL not set" >&2
    exit 1
fi

# Get notification data
IP="${F2B_IP:-unknown}"
JAIL="${F2B_JAIL:-unknown}"
ACTION="${F2B_ACTION:-ban}"
TIME="${F2B_TIME:-$(date -Iseconds)}"
COUNTRY="${F2B_COUNTRY:-}"
CITY="${F2B_CITY:-}"
ISP="${F2B_ISP:-}"
FAILURES="${F2B_FAILURES:-0}"

# Simple JSON payload
PAYLOAD=$(cat <<EOP
{
    "event": "fail2ban_$ACTION",
    "ip": "$IP",
    "jail": "$JAIL",
    "action": "$ACTION",
    "time": "$TIME",
    "country": "$COUNTRY",
    "city": "$CITY",
    "isp": "$ISP",
    "failures": $FAILURES
}
EOP
)

# Build curl command
CURL_CMD="curl -s -H 'Content-Type: application/json'"

if [[ -n "$AUTH_HEADER" ]]; then
    CURL_CMD="$CURL_CMD -H 'Authorization: $AUTH_HEADER'"
fi

CURL_CMD="$CURL_CMD -d '$PAYLOAD' '$WEBHOOK_URL'"

# Execute and check result
if eval "$CURL_CMD" > /dev/null; then
    echo "__NAME__ webhook notification sent"
    exit 0
else
    echo "__NAME__ webhook notification failed" >&2
    exit 1
fi
EOF
        ;;

    *)
        echo -e "${RED}‚ùå Unknown type: $TYPE${NC}"
        usage
        ;;
esac

# Replace placeholders
sed -i "s/__NAME__/$NAME/g" "$FILENAME"
sed -i "s/__NAME_UPPER__/${NAME^^}/g" "$FILENAME"

# Make executable
chmod +x "$FILENAME"

echo -e "${GREEN}‚úÖ Connector created: $FILENAME${NC}"
echo ""
echo -e "${BLUE}üìã Next steps:${NC}"
echo "1. Edit the connector script to customize for your service"
echo "2. Test the connector:"
echo "   sudo F2B_IP=192.168.1.100 F2B_JAIL=test F2B_ACTION=ban $FILENAME"
echo "3. Add to fail2ban-notify configuration:"
echo "   sudo fail2ban-notify -discover"
echo "   sudo nano /etc/fail2ban/fail2ban-notify.json"
echo ""
echo -e "${YELLOW}‚öôÔ∏è  Configuration variables needed:${NC}"

case "$TYPE" in
    "bash"|"webhook")
        echo "   ${NAME^^}_WEBHOOK_URL=https://your-service.com/webhook"
        ;;
    "python")
        echo "   ${NAME^^}_WEBHOOK_URL=https://your-service.com/webhook"
        echo "   ${NAME^^}_TIMEOUT=30"
        ;;
esac
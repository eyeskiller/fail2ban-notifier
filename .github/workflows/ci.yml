# .github/workflows/ci.yml
name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.23'

jobs:
  test:
    name: Test
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ env.GO_VERSION }}-

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc libc6-dev

      - name: Run tests with race detection
        env:
          CGO_ENABLED: 1
        run: |
          go test -race -covermode atomic -coverprofile=covprofile ./...

      - name: Generate coverage report
        run: |
          go tool cover -html=covprofile -o coverage.html

      - name: Store coverage locally
        run: |
          # Create artifacts directory if it doesn't exist
          mkdir -p $HOME/runner_artifacts/coverage
          # Copy coverage report to artifacts directory
          cp coverage.html $HOME/runner_artifacts/coverage/coverage-${{ github.sha }}.html
          echo "Coverage report stored at $HOME/runner_artifacts/coverage/coverage-${{ github.sha }}.html"

  test-without-race:
    name: Test (No Race Detection)
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run tests without race detection
        env:
          CGO_ENABLED: 0
        run: |
          go test -covermode count -coverprofile=coverage-norace.out ./...

      - name: Store coverage locally
        run: |
          # Create artifacts directory if it doesn't exist
          mkdir -p $HOME/runner_artifacts/coverage
          # Copy coverage report to artifacts directory
          cp coverage-norace.out $HOME/runner_artifacts/coverage/coverage-norace-${{ github.sha }}.out
          echo "Coverage report stored at $HOME/runner_artifacts/coverage/coverage-norace-${{ github.sha }}.out"

  lint:
    name: Lint
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run golangci-lint
        run: go run github.com/golangci/golangci-lint/cmd/golangci-lint@v1.58.1 run

  security:
    name: Security Scan
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install Gosec and dependencies
        run: |
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Run Gosec Security Scanner
        run: |
          gosec -fmt=json -out=results.json ./...
          cat results.json | jq
          BUGS=$(jq '.Golang.TotalBugs' results.json)
          if [ "$BUGS" -gt 0 ]; then
            echo "Security issues found!"
            exit 1
          fi

  build:
    name: Build
    runs-on: self-hosted
    needs: [test, lint]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}

      - name: Build for current platform
        run: |
          go build -v ./cmd/fail2ban-notify

      - name: Build for multiple platforms
        env:
          CGO_ENABLED: 0
        run: |
          # Build for Linux
          GOOS=linux GOARCH=amd64 go build -o dist/fail2ban-notify-linux-amd64 ./cmd/fail2ban-notify
          GOOS=linux GOARCH=arm64 go build -o dist/fail2ban-notify-linux-arm64 ./cmd/fail2ban-notify

          # Build for macOS
          GOOS=darwin GOARCH=amd64 go build -o dist/fail2ban-notify-darwin-amd64 ./cmd/fail2ban-notify
          GOOS=darwin GOARCH=arm64 go build -o dist/fail2ban-notify-darwin-arm64 ./cmd/fail2ban-notify

          # Build for Windows
          GOOS=windows GOARCH=amd64 go build -o dist/fail2ban-notify-windows-amd64.exe ./cmd/fail2ban-notify

      - name: Store build artifacts locally
        run: |
          # Create artifacts directory if it doesn't exist
          mkdir -p $HOME/runner_artifacts/binaries
          # Create a directory for this specific build
          mkdir -p $HOME/runner_artifacts/binaries/${{ github.sha }}
          # Copy binaries to artifacts directory
          cp -r dist/* $HOME/runner_artifacts/binaries/${{ github.sha }}/
          echo "Build artifacts stored at $HOME/runner_artifacts/binaries/${{ github.sha }}/"

  integration-test:
    name: Integration Tests
    runs-on: self-hosted
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use locally stored build artifacts
        run: |
          # Create dist directory if it doesn't exist
          mkdir -p dist
          # Copy artifacts from local storage
          cp -r $HOME/runner_artifacts/binaries/${{ github.sha }}/* dist/
          echo "Using build artifacts from $HOME/runner_artifacts/binaries/${{ github.sha }}/"

      - name: Make binary executable
        run: chmod +x dist/fail2ban-notify-linux-amd64

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y fail2ban curl python3

      - name: Install fail2ban-notify
        run: |
          sudo cp dist/fail2ban-notify-linux-amd64 /usr/local/bin/fail2ban-notify
          sudo cp configs/notify.conf /etc/fail2ban/action.d/
          sudo mkdir -p /etc/fail2ban/connectors
          sudo cp connectors/*.sh /etc/fail2ban/connectors/
          sudo cp connectors/*.py /etc/fail2ban/connectors/
          sudo chmod +x /etc/fail2ban/connectors/*

      - name: Initialize configuration
        run: sudo /usr/local/bin/fail2ban-notify -init

      - name: Test basic functionality
        run: |
          # Test version
          sudo /usr/local/bin/fail2ban-notify -version

          # Test discovery
          sudo /usr/local/bin/fail2ban-notify -discover

          # Test status
          sudo /usr/local/bin/fail2ban-notify -status

          # Test notification (without external services)
          sudo /usr/local/bin/fail2ban-notify -ip="192.168.1.100" -jail="test" -action="ban" -debug

  docker:
    name: Docker Build
    runs-on: self-hosted
    needs: [test, lint]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

---
# .github/workflows/release.yml
name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  test:
    name: Test before release
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run tests
        run: make test

      - name: Run lint
        run: make lint

  goreleaser:
    name: GoReleaser
    runs-on: self-hosted
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update installation script
        run: |
          # Update the installation script with the new version
          TAG=${GITHUB_REF#refs/tags/}
          sed -i "s/LATEST_VERSION=.*/LATEST_VERSION=\"$TAG\"/" scripts/install.sh

          # Commit updated script back to main branch
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git checkout main
          git add scripts/install.sh
          git commit -m "chore: update install script for $TAG" || exit 0
          git push origin main

  update-homebrew:
    name: Update Homebrew
    runs-on: self-hosted
    needs: goreleaser
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Update Homebrew formula
        uses: mislav/bump-homebrew-formula-action@v3
        with:
          formula-name: fail2ban-notify
          formula-path: Formula/fail2ban-notify.rb
          homebrew-tap: ${{ github.repository_owner }}/homebrew-tap
          download-url: https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/fail2ban-notify_Darwin_x86_64.tar.gz
          commit-message: |
            {{formulaName}} {{version}}

            Created by https://github.com/mislav/bump-homebrew-formula-action
        env:
          COMMITTER_TOKEN: ${{ secrets.COMMITTER_TOKEN }}

---
# .github/workflows/nightly.yml
name: Nightly Build

on:
  schedule:
    - cron: '0 2 * * *'  # Run at 2 AM UTC daily
  workflow_dispatch:     # Allow manual trigger

jobs:
  nightly:
    name: Nightly Build
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run GoReleaser (snapshot)
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          args: release --snapshot --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Store nightly artifacts locally
        run: |
          # Create artifacts directory if it doesn't exist
          mkdir -p $HOME/runner_artifacts/nightly
          # Create a directory for this specific nightly build
          NIGHTLY_DIR=$HOME/runner_artifacts/nightly/$(date +%Y-%m-%d)
          mkdir -p $NIGHTLY_DIR
          # Copy artifacts to nightly directory
          cp -r dist/* $NIGHTLY_DIR/
          echo "Nightly build artifacts stored at $NIGHTLY_DIR/"

          # Clean up old nightly builds (keep last 7 days)
          find $HOME/runner_artifacts/nightly -type d -mtime +7 -exec rm -rf {} \; 2>/dev/null || true

---
# .github/workflows/dependency-update.yml
name: Dependency Update

on:
  schedule:
    - cron: '0 10 * * 1'  # Run every Monday at 10 AM UTC
  workflow_dispatch:

jobs:
  update-dependencies:
    name: Update Dependencies
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Update dependencies
        run: |
          go get -u ./...
          go mod tidy

      - name: Run tests
        run: make test

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore: update dependencies'
          title: 'chore: update dependencies'
          body: |
            This PR updates Go dependencies to their latest versions.

            Changes:
            - Updated all Go modules to latest versions
            - Verified tests still pass

            Auto-generated by GitHub Actions.
          branch: chore/update-dependencies
          delete-branch: true
